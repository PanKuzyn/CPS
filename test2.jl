   #sygnał o zadanym przebiegu
             
function rozwiazanie3(;
    fp::Float64 = 118.48,
    t1::Float64 = -1.57,
    N::Int = 580,
)
    g(t) = -2*(t-floor(t+1/2))
    x = range(start = t1, step = 1/fp, length = N)
    y = [2*(g(2t-4.1)) for t in x]

    return sum(y)/length(y)
end
rozwiazanie3()

function rozwiazanie(;
    fp::Float64 = 498.99,
    t1::Float64 = 9.38,
    N::Int = 504,
)
    g(t)=  2*(t-floor(t+1/2))
    x = range(start = t1, step = 1/fp, length=N)
    y = [3.4*g(3.6*t-3) for t in x ]
    return sum(y)/length(y)
end
rozwiazanie()
    
function rozwiazanie(;
    fp::Float64 = 471.46,
    t1::Float64 = 0.28,
    N::Int = 922,
)
   g(t) = sign(sin(2*pi*t))
   x = range(start = t1, step = 1/fp, length=N)
   y = [3*g(2.5t-1) for t in x]
   return sum(y)/length(y)
end
rozwiazanie()

function rozwiazanie(;
    fp::Float64 = 352.67,
    t1::Float64 = 0.09,
    N::Int = 237,
)
    g(t) = sign(sin(2*pi*t))
    x = range(start = t1, step = 1/fp, length = N)
    y = [3.3g(4.1t-4.2) for t in x]
    
    return sum(y)/length(y)


end
rozwiazanie()   
   
   
   #dft      
function rozwiazanie(;
    fp::Int = 572,
    x::Vector{ComplexF64} = ComplexF64[-0.29 - 1.49im, 0.89 - 0.61im, -0.44 + 0.09im, -0.06 + 0.79im, -0.31 - 0.94im, -1.8 + 0.46im, -1.77 - 0.6im, -0.19 - 0.2im, -0.66 + 0.55im, 0.75 + 0.67im, 0.93 - 0.33im, 0.18 - 0.59im, -0.14 - 0.33im, -1.45 + 0.12im, -0.24 + 1.02im, 0.11 - 0.62im, -0.17 + 0.46im, -0.28 + 1.28im, 0.86 + 0.39im, 0.59 - 0.52im, -0.72 + 0.53im, -0.48 + 0.68im, -0.04 - 0.76im, -0.41 + 0.22im, 0.93 + 0.23im, 0.42 - 0.03im],
    f::Vector{Int} = [-220, -198, -154, -110, -44, 132, 220, 242],
)
    N=length(x)
    return sum([abs.(sum([x[n+1]cispi(-2fi/fp*n) for n in 0:N-1])/N) for fi in f])
end
rozwiazanie()
        
              
function rozwiazanie2(;
    fp::Int = 858,
    x::Vector{ComplexF64} = ComplexF64[-0.39 - 0.57im, 0.22 + 0.36im, 0.97 - 0.31im, -0.2 + 0.28im, -0.8 - 1.34im, 0.8 + 0.26im, 0.63 + 0.21im, -0.4 + 0.71im, 0.93 + 0.04im, 0.02 - 0.47im, 0.07 + 1.91im, 0.14 + 0.23im, 0.56 + 0.79im, 0.73 + 0.13im, 0.35 - 0.81im, -0.12 - 0.53im, 1.15 - 0.43im, 0.03 - 1.24im, 0.87 + 0.3im, -0.06 - 0.34im, 0.04 + 0.5im, 0.35 + 1.21im, 0.37 - 0.73im, 0.05 + 0.54im, 0.03 + 0.78im, 0.15 + 0.02im, -0.17 - 0.17im, 0.32 + 0.49im, -0.01 + 0.63im, 1.27 - 0.59im, -1.07 - 0.34im, 2.2 + 0.5im, 0.26 - 0.67im, 0.27 + 0.44im, -0.82 + 0.64im, -0.62 - 0.96im, -0.03 - 0.25im, -1.35 + 0.14im, 0.16 + 0.3im],
    f::Vector{Int} = [-308, -286, -242, -154, -66, 242, 330],
)
   N=length(x)
   return sum([angle.(sum([x[n+1]cispi(-2fi/fp*n) for n in 0:N-1])/N) for fi in f])
end

rozwiazanie2()
          
function rozwiazanie(;
    fp::Int = 450,
    x::Vector{ComplexF64} = ComplexF64[-0.36 - 0.91im, -0.11 - 0.17im, 0.47 + 0.26im, 0.18 + 0.49im, -1.28 + 0.91im, -0.42 - 0.14im, 0.71 - 0.49im, -0.12 - 0.78im, 0.51 - 0.97im, -0.23 + 0.3im, 0.07 + 0.91im, -0.41 + 1.2im, -0.22 - 0.06im, -0.16 + 0.05im, 1.37 - 0.22im, 0.85 + 0.87im, -0.42 - 0.47im, -0.24 + 0.83im, 0.72 + 0.74im, 1.01 + 0.92im, 1.3 + 0.69im, 0.27 - 0.31im, 0.2 - 1.69im, -0.16 + 0.67im, 1.43 - 0.34im],
    f::Vector{Int} = [-108, -18, 36, 72, 108],
)
    N=length(x)
    return sum([abs.(sum([x[n+1]cispi(-2fi/fp*n) for n in 0:N-1])/N) for fi in f])
end
rozwiazanie()
        
   


    #sygnał wyjściowy
    
          
function rozwiazanie(;
    x::Vector{Float64} = [4.04, -2.35, -0.8, 2.5, -2.53, 2.5, 2.7, -2.66, -4.33, 3.61, -4.12, -2.21, -2.86, -4.01, -0.71, 3.43, -3.52, 2.84, -0.27, 4.7, -4.36, 2.91, 2.95, -0.76, -1.9, 0.66, 4.31, -4.53, 3.63, 1.94, 0.09, 2.54, -0.93, -3.99, 0.84, -3.64, -0.82, 1.3, -0.34, -3.34, 1.1, -2.31, -1.0, 2.38, 2.83, 2.96, -0.53, 2.14, 2.74, -0.22, -1.39, -0.49, -4.46, 0.24, -4.24, 3.34, -0.9, -3.94, 1.54, -4.09, -3.1, 0.73, -1.89],
    h::Vector{Float64} = [0.96, 1.17, -4.46, -4.07, -0.21, 3.55, -2.89, -3.74, 2.41, 2.59, 1.45, 4.52, -2.44, -1.44],
)
    function conv(x, h)
    A=length(x)
    B=length(h)
    C=A+B-1
    y = zeros(Float64,C)
    for i in 1:C 
        for j in 1:B 
            if i-j+1 > 0 && i-j+1 <=A 
            y[i]+=h[j]*x[i-j+1]
            end
        end
    end  
    return y
end

    y = conv(x,h)
    return sum(y.^2)/length(y) 




end
rozwiazanie()

#równanie różnicowe

function rozwiazanie(;
    b::Vector{Float64} = [1.725047810629578e-5, 0.0, -6.900191242518312e-5, 0.0, 0.00010350286863777469, 0.0, -6.900191242518312e-5, 0.0, 1.725047810629578e-5],
    a::Vector{Float64} = [1.0, -4.825101980968076, 12.573788218108334, -20.965921763386415, 24.552450419187867, -20.30612245029703, 11.794774344205035, -4.383549081107223, 0.8799814336326294],
    x::Vector{Float64} = [-0.77, 1.0, -0.01, 0.42, -0.74, 0.55, -0.82, 0.48, 0.54, 0.24, -0.91, -0.74, 0.33, -0.36, -0.02, 0.63, 0.41, 0.54, -0.67, 0.6, -0.62, 0.42, -0.21, -0.69, -0.51, 0.55, -0.96, -0.36, 0.55, -0.54, -0.93, 0.31, 0.75],
    L::Int = 48,
)
    M=length(b)
    K=length(a)
    N=length(x)
    y=zeros(Float64,L)

    for n in 1:L
        for m in 1:M 
            if n-m+1>0 && n-m+1<=N 
                y[n] +=b[m]*x[n-m+1]
            end
        end 
        for k in 2:K 
            if n-k+1 >0 && n-k+1<=L 
                y[n] -=a[k]*y[n-k+1]
            end
        end
    end 
    return sum(y.^2)
end
rozwiazanie()


function rozwiazanie(;
    b::Vector{Float64} = [0.0001824576217927976, 0.0, -0.0007298304871711904, 0.0, 0.0010947457307567856, 0.0, -0.0007298304871711904, 0.0, 0.0001824576217927976],
    a::Vector{Float64} = [1.0, -4.3462771138252085, 10.723355668678993, -17.10139259989802, 19.577251856850896, -15.985988924574716, 9.369620185372915, -3.5484690027943397, 0.7635949896497858],
    x::Vector{Float64} = [-0.85, -0.9, 0.15, 0.24, 0.54, -0.55, 0.35, 0.23, 0.58, 0.26, 0.72, 0.54, 0.25, 0.18, 0.65, -0.27, 0.96, -0.05, 0.26, 0.08, 0.75, -0.66, 0.68, 0.6, 0.82, -0.78, 0.85, -0.05, 0.25, -0.98, -0.82, 0.97, 0.08, -0.56, 0.2, -0.62, 0.13, 0.96, 0.28, 0.79, -0.92, -0.28, 0.13, -0.96, -0.11, -0.79, 0.24, 0.59, 0.29],
    L::Int = 68,
)
    y = zeros(Float64, L)
    for i in 1:L 
        for j in 1:length(b)
            if i-j+1 > 0 && i-j+1 <=length(x)
                y[i] += b[j]*x[i-j+1]
            end
        end
        for k in 2:length(a)
            if i-k+1>0 && i-k+1 <=L 
                y[i] -=a[k]*y[i-k+1]
            end
        end
    end
    return sum(y.^2)
end
rozwiazanie()


function rozwiazanie(;
    b::Vector{Float64} = [0.005886216155083775, 0.0, -0.017658648465251326, 0.0, 0.017658648465251326, 0.0, -0.005886216155083775],
    a::Vector{Float64} = [1.0, -2.8390104753828656, 4.8984221995853146, -5.0962271628207905, 3.7271905661816733, -1.637353111316897, 0.43922072794642975],
    x::Vector{Float64} = [0.65, 0.72, 0.8, 0.58, -0.31, -0.92, -0.9, 0.21, 0.87, -0.52, -0.51, -0.37, 0.66, -0.29, -0.09, 0.44, -0.94, -0.25, -0.95, 0.15, -0.74, 0.28, -0.95, -0.99, 0.33, 0.42, -0.89, 0.89, -0.03],
    L::Int = 50,
)
    y = zeros(Float64,L)

    for i in 1:L 
        for j in 1:length(b)
            if i-j+1 >0 && i-j+1 <=length(x)
                y[i] += b[j]*x[i-j+1]
            end
        end
        for k in 2:length(a)
            if i-k+1 >0 && i-k+1 <=L 
                y[i] -= a[k]*y[i-k+1]
            end
        end
    end
    return sum(y.^2)/length(y)
end
rozwiazanie()

    #stabilność układu


        function rozwiazanie1(;
    z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.3797788385813316 - 0.8467121324981864im, 0.13538094673207834 + 0.9121887587192452im, 0.3797788385813316 + 0.8467121324981864im, 0.13538094673207834 - 0.9121887587192452im, 0.24384716803568696 - 0.8167503208731152im, 0.24384716803568696 + 0.8167503208731152im],
    k::Float64 = 0.0028981946337214245,
)
    for pole in p 
        if abs(pole) > 1 
            return -1
        end
    end
    for pole in p 
        if abs(pole) == 1 
            return 0
        end
    end
    return 1
end
rozwiazanie1()  
          
function rozwiazanie(;
    z::Vector{ComplexF64} = ComplexF64[0.6004050390527709 - 0.7996960604379896im, 0.6004050390527709 + 0.7996960604379896im, -1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.8490427397884011 - 0.21351030305751129im, 1.939611442795805 + 0.4877575739807375im, 0.7446103455884838 - 0.0im],
    k::Float64 = 0.010924938955310586,
)
    for pole in p 
        if abs(pole) > 1
            return -1
        end
    end
    for pole in p 
        if abs(pole) == 1
            return 0
        end
    end
    return 1
end
rozwiazanie()

#kwantyzacja
          


function rozwiazanie(;
    a::Float64 = -2.3,
    b::Float64 = 3.5,
    x::Vector{Float64} = [1.18, 1.35656, 1.53312, 1.70968, 1.88624, 2.0628, 2.23936, 2.41592, 2.59248, 2.76904, 2.9456, 3.12216, 3.29872, 3.47528, -2.14816, -1.9716, -1.79504, -1.61848, -1.44192, -1.26536, -1.0888, -0.91224, -0.73568, -0.55912, -0.38256, -0.206, -0.02944, 0.14712, 0.32368, 0.50024, 0.6768, 0.85336, 1.02992, 1.20648, 1.38304, 1.5596, 1.73616, 1.91272, 2.08928, 2.26584, 2.4424, 2.61896, 2.79553, 2.97209, 3.14865, 3.32521, -2.29823, -2.12167, -1.94511, -1.76855, -1.59199, -1.41543, -1.23887, -1.06231, -0.88575, -0.70919, -0.53263, -0.35607, -0.17951, -0.00295, 0.17361, 0.35017, 0.52673, 0.70329, 0.87985, 1.05641, 1.23297, 1.40953, 1.58609, 1.76265, 1.93921, 2.11577, 2.29233, 2.46889, 2.64545, 2.82201, 2.99857, 3.17513, 3.35169, -2.27175, -2.09519, -1.91863, -1.74207, -1.56551, -1.38895, -1.21239, -1.03583, -0.85927, -0.68271],
)
    N = 7
    quantize(L) = x -> L[argmin(abs.(x.-L))]
    L = range(start = a, stop = b, length = 2^N)
    q = quantize(L)
    q_x= q.(x)
    e = x-q_x

    return sum(e.^2)/length(e)


end
rozwiazanie()
        
function rozwiazanie(;
    a::Float64 = -3.8,
    b::Float64 = -0.37,
    x::Vector{Float64} = [-1.32078, -1.13615, -0.94457, -0.72221, -3.62155, -3.35868, -3.13766, -2.93122, -2.73708, -2.54887, -2.35833, -2.1605, -1.95672, -1.75329, -1.55661, -1.36812, -1.18233, -0.9887, -0.7696, -3.82182, -3.40959, -3.18358, -2.97715, -2.78391, -2.59618, -2.40546, -2.20717, -2.00323, -1.80014, -1.60395, -1.41542, -1.22861, -1.03341, -0.81657, -0.37487, -3.46276, -3.22929, -3.02296, -2.83073, -2.64352, -2.4526, -2.25385, -2.04975, -1.84699, -1.65126, -1.46268, -1.27496, -1.07853, -0.86342, -0.5782, -3.52087, -3.27468, -3.06859, -2.87755, -2.69089, -2.49975, -2.30052, -2.09627, -1.89384, -1.69855, -1.50992, -1.32137, -1.12394, -0.91024, -0.66142, -3.59341, -3.31962, -3.11401, -2.92436, -2.73829, -2.54691, -2.34719, -2.14279, -1.94069],
)
    quantize(L) = x->L[argmin(abs.(x.-L))]
    N = 10
    L = range(start = a, stop = b, length=2^N)
    q = quantize(L)
    x_q = q.(x)
    e = x-x_q
    return sum(e.^2)
end
rozwiazanie()

    #interpolacja Whittakera

                        
function rozwiazanie(;
    m::Vector{Float64} = [-3.1, -3.0981, -3.0962, -3.0943, -3.0924, -3.0905, -3.0886, -3.0867, -3.0848, -3.0829, -3.081, -3.0791, -3.0772, -3.0753, -3.0734, -3.0715, -3.0696, -3.0677, -3.0658, -3.0639, -3.062, -3.0601, -3.0582, -3.0563, -3.0544, -3.0525, -3.0506, -3.0487, -3.0468, -3.0449, -3.043, -3.0411, -3.0392, -3.0373, -3.0354, -3.0335, -3.0316, -3.0297, -3.0278, -3.0259, -3.024, -3.0221, -3.0202, -3.0183, -3.0164, -3.0145, -3.0126, -3.0107, -3.0088, -3.0069, -3.005, -3.0031, -3.0012, -2.9993, -2.9974, -2.9955, -2.9936, -2.9917, -2.9898, -2.9879, -2.986, -2.9841, -2.9822, -2.9803, -2.9784, -2.9765, -2.9746, -2.9727, -2.9708, -2.9689, -2.967, -2.9651, -2.9632, -2.9613, -2.9594, -2.9575, -2.9556, -2.9537, -2.9518, -2.9499, -2.948, -2.9461, -2.9442, -2.9423, -2.9404, -2.9385, -2.9366],
    s::Vector{Float64} = [0.0016, 0.868, 0.4233, 0.3151, 0.8495, 0.3319, 0.7014, 0.0858, 0.3709, 0.6894, 0.9943, 0.5648, 0.1114, 0.1009, 0.4167, 0.9041, 0.4471, 0.4842, 0.9505, 0.0193, 0.1264, 0.6599, 0.0701, 0.0023, 0.2732, 0.6518, 0.9165, 0.3205, 0.927, 0.541, 0.7135, 0.9185, 0.5548, 0.1375, 0.4172, 0.661, 0.2653, 0.5919, 0.4469, 0.398, 0.1586, 0.1225, 0.459, 0.5667, 0.6765, 0.9702, 0.381, 0.9052, 0.5136, 0.6519, 0.1145, 0.6495, 0.4796, 0.1775, 0.4553, 0.3526, 0.6001, 0.3671, 0.8315, 0.761, 0.8923, 0.5677, 0.4631, 0.1738, 0.6079, 0.9224, 0.9401, 0.1711, 0.1527, 0.1519, 0.0395, 0.3458, 0.5697, 0.0576, 0.2754, 0.9002, 0.8284, 0.451, 0.2489, 0.3666, 0.5909, 0.5774, 0.3546, 0.8758, 0.1553, 0.4619, 0.6545],
    t::Vector{Float64} = [-3.03046, -3.08974, -3.08803, -2.95997],
)
    T = m[2]-m[1]
    t_out = zeros(length(t))

    for i in 1:length(t)
        for j in 1: length(s)
            t_out[i] += sinc((t[i]-m[j])/T) *s[j]
        end
    end
    return sum(t_out)
end
rozwiazanie()

function rozwiazanie(;
    m::Vector{Float64} = [2.8, 2.8019, 2.8038, 2.8057, 2.8076, 2.8095, 2.8114, 2.8133, 2.8152, 2.8171, 2.819, 2.8209, 2.8228, 2.8247, 2.8266, 2.8285, 2.8304, 2.8323, 2.8342, 2.8361, 2.838, 2.8399, 2.8418, 2.8437, 2.8456, 2.8475, 2.8494, 2.8513, 2.8532, 2.8551, 2.857, 2.8589, 2.8608, 2.8627, 2.8646, 2.8665, 2.8684, 2.8703, 2.8722, 2.8741, 2.876, 2.8779, 2.8798, 2.8817, 2.8836, 2.8855, 2.8874, 2.8893, 2.8912, 2.8931, 2.895, 2.8969, 2.8988, 2.9007, 2.9026, 2.9045, 2.9064, 2.9083, 2.9102, 2.9121, 2.914],
    s::Vector{Float64} = [0.0025, 0.0588, 0.8666, 0.7365, 0.1205, 0.3544, 0.7307, 0.4551, 0.0726, 0.4234, 0.1429, 0.4319, 0.8926, 0.447, 0.9485, 0.1193, 0.5426, 0.824, 0.7288, 0.5842, 0.351, 0.5389, 0.0885, 0.5073, 0.4411, 0.2934, 0.5071, 0.5116, 0.0003, 0.9083, 0.7886, 0.3045, 0.8251, 0.8614, 0.617, 0.6531, 0.7969, 0.1681, 0.2543, 0.6885, 0.927, 0.451, 0.7601, 0.9688, 0.8076, 0.2111, 0.6989, 0.7451, 0.489, 0.0804, 0.1332, 0.4731, 0.2665, 0.6928, 0.5649, 0.9544, 0.3258, 0.4117, 0.3996, 0.7947, 0.0048],
    t::Vector{Float64} = [2.8133, 2.86023, 2.88664, 2.89443, 2.84085, 2.84807],
)
    T = m[2]-m[1]
    t_out = zeros(length(t))
    for i in 1:length(t)
        for j in 1:length(s)
            t_out[i] += sinc((t[i]-m[j])/T)*s[j]
        end
    end
    return sum(t_out)
end
rozwiazanie()
        
function rozwiazanie(;
    m::Vector{Float64} = [-3.5, -3.4982, -3.4964, -3.4946, -3.4928, -3.491, -3.4892, -3.4874, -3.4856, -3.4838, -3.482, -3.4802, -3.4784, -3.4766, -3.4748, -3.473, -3.4712, -3.4694, -3.4676, -3.4658, -3.464, -3.4622, -3.4604, -3.4586, -3.4568, -3.455, -3.4532, -3.4514, -3.4496, -3.4478, -3.446, -3.4442, -3.4424, -3.4406, -3.4388, -3.437, -3.4352, -3.4334, -3.4316, -3.4298, -3.428, -3.4262, -3.4244, -3.4226, -3.4208, -3.419, -3.4172, -3.4154, -3.4136, -3.4118, -3.41, -3.4082, -3.4064, -3.4046, -3.4028, -3.401, -3.3992, -3.3974, -3.3956, -3.3938, -3.392, -3.3902, -3.3884, -3.3866],
    s::Vector{Float64} = [0.4607, 0.9715, 0.5829, 0.9331, 0.6486, 0.4749, 0.9402, 0.0072, 0.2414, 0.0757, 0.5091, 0.1688, 0.977, 0.3178, 0.0875, 0.0832, 0.4356, 0.9842, 0.7335, 0.7548, 0.7547, 0.433, 0.3107, 0.58, 0.7886, 0.4925, 0.452, 0.6665, 0.0471, 0.0214, 0.4556, 0.9968, 0.1717, 0.7335, 0.506, 0.2897, 0.4962, 0.2157, 0.5445, 0.8385, 0.7194, 0.9963, 0.5799, 0.5429, 0.5197, 0.013, 0.5997, 0.5934, 0.1305, 0.3079, 0.5057, 0.35, 0.1125, 0.3922, 0.8621, 0.1011, 0.746, 0.4621, 0.3208, 0.3656, 0.5528, 0.4208, 0.2056, 0.8749],
    t::Vector{Float64} = [-3.49946, -3.43412, -3.41, -3.43628, -3.44132, -3.48848, -3.44618, -3.39776, -3.49424, -3.40478, -3.4433, -3.47138],
)
    t_out = zeros(length(t))
    T = m[2]-m[1]

    for i in 1:length(t)
        for j in 1: length(s)
            t_out[i] += sinc((t[i]-m[j])/T)*s[j]
        end
    end
    return sum(t_out)
end
rozwiazanie()

          
        #transmitancja

function rozwiazanie(;
    b::Vector{Float64} = [0.09690588994826067, -0.4004081385768237, 0.8184157087376562, -1.0223679701595116, 0.8184157087376562, -0.40040813857682367, 0.09690588994826065],
    a::Vector{Float64} = [1.0, -0.6592300629638518, 1.1219500725455562, -0.5095075748876536, 0.28631368108070654, -0.06709412594593915, 0.009731927261286931],
    F::Vector{Float64} = [0.01, 0.08, 0.2, 0.31],
)
    M=length(b)
    L=length(a)
    K=length(F)
    out = zeros(K)

    for i in 1:K
        licznik = 0
        mianownik = 0
        for j in 1:M 
            licznik += b[j]*cispi(2F[i])^-(j-1)
        end
        for j in 1:L 
            mianownik +=a[j]*cispi(2F[i])^-(j-1)
        end
    out[i] = abs(licznik/mianownik)
    end
    return sum(out)/length(out)
end
rozwiazanie()

function rozwiazanie(;
    b::Vector{Float64} = [0.6668547023844128, -1.720764471909391, 3.4806618241912046, -3.8658925116288825, 3.4806618241912037, -1.720764471909391, 0.6668547023844127],
    a::Vector{Float64} = [1.0, -2.2575274288819127, 3.948876910415752, -3.813445803637163, 2.951472093696976, -1.2364482229285918, 0.3946840490385092],
    F::Vector{Float64} = [0.14, 0.43, 0.48, 0.5],
)
 y = zeros(Float64, length(F))
    for i in 1:(length(F))
        mianownik = 0
        licznik = 0
        for j in 1:length(b)
            licznik += b[j]*cispi(2F[i])^-(j-1)
        end
          for j in 1:length(a)
            mianownik += a[j]*cispi(2F[i])^-(j-1)
        end
    y[i] = abs(licznik/mianownik)


    end
    return sum(y)/length(y)
end
rozwiazanie()


#srednie przesuniecie fazowe 
#inne dane
function rozwiazanie(;
    zz::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    pp::Vector{ComplexF64} = ComplexF64[0.543701277994591 - 0.8319925555042785im, 0.29457887606763117 + 0.9483370303390719im, 0.543701277994591 + 0.8319925555042785im, 0.29457887606763117 - 0.9483370303390719im, 0.508848478970115 - 0.8409843938995955im, 0.3274254690915373 + 0.9249844307416222im, 0.508848478970115 + 0.8409843938995955im, 0.3274254690915373 - 0.9249844307416222im, 0.45219457592657175 - 0.864724019694428im, 0.3858890222126597 + 0.8953357230268396im, 0.45219457592657175 + 0.864724019694428im, 0.3858890222126597 - 0.8953357230268396im],
    k::Float64 = 2.9839279959995376e-7,
    F::Vector{Float64} = [0.13, 0.22, 0.43, 0.48],
)
   out = zeros(length(F))

   for i in 1:length(F)
        licznik = 1
        mianownik = 1
        for j in 1:length(zz)
            licznik *= cispi(2F[i])-zz[j]
        end
        for j in 1:length(pp)
            mianownik *= cispi(2F[i])-pp[j]
        end
    out[i] = angle(k*licznik/mianownik)
    end
    return sum(out)/length(out)
end
rozwiazanie()          

function rozwiazanie(;
    zz::Vector{ComplexF64} = ComplexF64[0.5653138377631579 + 0.8248759087483948im, 0.5653138377631579 - 0.8248759087483948im, 0.9090424796534677 + 0.41670345593176317im, 0.9090424796534677 - 0.41670345593176317im],
    pp::Vector{ComplexF64} = ComplexF64[-0.27610745027671657 + 0.6519220973669482im, -0.27610745027671657 - 0.6519220973669482im, -0.1706544392027319 + 0.2080237764058478im, -0.1706544392027319 - 0.2080237764058478im],
    k::Float64 = 0.05804559733761661,
    F::Vector{Float64} = [0.01, 0.44, 0.46],
)
    L = length(zz)
    M = length(pp)
    y = zeros(Float64, length(F))
    for i in 1:length(F)
        mianownik = 1
        licznik = 1
        for j in 1:L
            licznik  *= cispi(2*F[i])-zz[j]
        end
        for j in 1:M 
            mianownik *= cispi(2F[i])-pp[j]
        end
    y[i] = abs(k*licznik/mianownik)
    end
    return sum(y)/length(y)

end
rozwiazanie()

#filtry

        hanning(M::Integer)::AbstractVector{<:Real} = [0.5(1+cos(2*pi*n/(2M+1))) for n in -M:M]
        
        pasmowoprzepust(order::Integer, F1::Float64, F2::Float64)::Vector = [2F2*sinc(2F2*n)-2F1*sinc(2F1*n) for n in -order/2 : order/2]
           
function rozwiazanie(;
    order::Int = 42,
    fp::Float64 = 198.0,
    f1::Float64 = 54.45,
    f2::Float64 = 97.02,
    z::Vector{Int} = [37, 32, 24],
)
    h = pasmowoprzepust(order, f1/fp, f2/fp)
    h = h.*hanning(Int(order/2))
    h_z = [h[i] for i in z]
    return sum(h_z)
end
rozwiazanie()
   

     pasmowoprzepust(order::Integer, F1::Float64, F2::Float64)::Vector = [2F2*sinc(2F2*n) - 2F1*sinc(2F1*n) for n in -order/2:order/2]

     triang(M::Integer)::AbstractVector{<:Real} = [1-abs(n)/(M+1) for n in -M:M]
     



function rozwiazanie(;
    order::Int = 56,
    fp::Float64 = 190.0,
    f1::Float64 = 49.4,
    f2::Float64 = 72.2,
    z::Vector{Int} = [8, 27, 30, 21, 17],
)
   h = pasmowoprzepust(order, f1/fp, f2/fp)
   h= h.*triang(Int(order/2))
   h_z = [h[i] for i in z]
   
   return sum(h_z)
end
rozwiazanie()

   kronecker(n::Integer)::Real = ifelse(n == 0, 1, 0)
   pasmowozaporowy(order::Integer, F1::Float64, F2::Float64)::Vector = [kronecker(Int(n)) - (2F2*sinc(2F2 *n) - 2F1*sinc(2F1*n)) for n in -order/2 : order/2]
   triang(M::Integer)::AbstractVector{<:Real} = [1-abs(n)/(M+1) for n in -M:M]
          
function rozwiazanie(;
    order::Int = 22,
    fp::Float64 = 199.0,
    f1::Float64 = 58.7,
    f2::Float64 = 80.6,
    z::Vector{Int} = [18, 21, 6, 4, 22],
)
    h = pasmowozaporowy(order, f1/fp, f2/fp)
    h = h.*triang(Int(order/2))
    h_z = [h[i] for i in z]
    return sum(h_z)
end
rozwiazanie()












#1 mozna powtorzyc
function rozwiazanie(;
    m::Vector{Float64} = [-4.9, -4.8983, -4.8966, -4.8949, -4.8932, -4.8915, -4.8898, -4.8881, -4.8864, -4.8847, -4.883, -4.8813, -4.8796, -4.8779, -4.8762, -4.8745, -4.8728, -4.8711, -4.8694, -4.8677, -4.866, -4.8643, -4.8626, -4.8609, -4.8592, -4.8575, -4.8558, -4.8541, -4.8524, -4.8507, -4.849, -4.8473, -4.8456, -4.8439, -4.8422, -4.8405, -4.8388, -4.8371, -4.8354, -4.8337, -4.832, -4.8303, -4.8286, -4.8269, -4.8252, -4.8235, -4.8218, -4.8201, -4.8184, -4.8167, -4.815, -4.8133, -4.8116, -4.8099, -4.8082, -4.8065, -4.8048, -4.8031, -4.8014, -4.7997, -4.798, -4.7963, -4.7946, -4.7929, -4.7912, -4.7895, -4.7878, -4.7861, -4.7844, -4.7827, -4.781, -4.7793, -4.7776, -4.7759, -4.7742, -4.7725, -4.7708, -4.7691, -4.7674, -4.7657],
    s::Vector{Float64} = [0.8089, 0.8388, 0.2821, 0.444, 0.3396, 0.4211, 0.3288, 0.0612, 0.6742, 0.5735, 0.7235, 0.0598, 0.7484, 0.5026, 0.3536, 0.2762, 0.2282, 0.031, 0.3112, 0.2543, 0.1337, 0.2436, 0.8792, 0.4471, 0.6556, 0.701, 0.6585, 0.4305, 0.2091, 0.2472, 0.7135, 0.1381, 0.7475, 0.9484, 0.8124, 0.9139, 0.8362, 0.2206, 0.0563, 0.8175, 0.2001, 0.9725, 0.9256, 0.613, 0.6927, 0.8442, 0.036, 0.7393, 0.9848, 0.5878, 0.3853, 0.6454, 0.8878, 0.1429, 0.1177, 0.5199, 0.869, 0.9324, 0.9998, 0.2061, 0.2548, 0.8636, 0.4964, 0.2699, 0.7732, 0.6843, 0.0196, 0.0454, 0.9247, 0.9566, 0.2476, 0.9905, 0.205, 0.9355, 0.2402, 0.8475, 0.2027, 0.3778, 0.7103, 0.1731],
    t::Vector{Float64} = [-4.82095, -4.81466, -4.87807, -4.77828, -4.82146, -4.85104, -4.80701, -4.79987, -4.8286, -4.76689, -4.78814, -4.78542, -4.86005, -4.77131, -4.82435],
)
    tout = zeros(length(t))
    T = m[2]-m[1]
    for i in 1:length(t)
      for j in 1:length(s)
        tout[i] += sinc((t[i]-m[j])/T)*s[j]
      end
    end
    return sum(tout)
end
rozwiazanie()

#2 mozna powtorzyc 73
function rozwiazanie(;
    b::Vector{Float64} = [0.09690588994826067, -0.4004081385768237, 0.8184157087376562, -1.0223679701595116, 0.8184157087376562, -0.40040813857682367, 0.09690588994826065],
    a::Vector{Float64} = [1.0, -0.6592300629638518, 1.1219500725455562, -0.5095075748876536, 0.28631368108070654, -0.06709412594593915, 0.009731927261286931],
    F::Vector{Float64} = [0.01, 0.08, 0.2, 0.31],
)
        y = zeros(length(F))
        for i in 1:length(F)
          mianownik = 0
          licznik = 0
          for j in 1:length(b)
            licznik += b[j]*cispi(2F[i])^-(j-1)
          end
          for j in 1:length(a)
            mianownik += a[j]*cispi(2F[i])^-(j-1)
          end
        y[i] = abs(licznik/mianownik)
        end
        return sum(y)/length(y)

end
rozwiazanie()


# 3 obcykane 

function rozwiazanie(;
    z::Vector{ComplexF64} = ComplexF64[1.0 + 0.0im, 1.0 + 0.0im, 1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im, -1.0 + 0.0im],
    p::Vector{ComplexF64} = ComplexF64[0.3797788385813316 - 0.8467121324981864im, 0.13538094673207834 + 0.9121887587192452im, 0.3797788385813316 + 0.8467121324981864im, 0.13538094673207834 - 0.9121887587192452im, 0.24384716803568696 - 0.8167503208731152im, 0.24384716803568696 + 0.8167503208731152im],
    k::Float64 = 0.0028981946337214245,
)
    for pole in p 
      if abs(pole) > 1
        return -1
      end
    end
    for pole in p 
      if abs(pole) == 1
        return 0
      end
    end
    return 1
end
rozwiazanie()

#4 powtorzyc przebiegi

function rozwiazanie(;
    fp::Float64 = 406.56,
    t1::Float64 = -2.67,
    N::Int = 643,
)
    g(t) = 2*abs(2*(t+1/4) - floor((t+1/4)+1/2))
    x = range(start = t1, step = 1/fp, length = N)
    y = [0.6*g(4.7t-4.7) for t in x]
    return sum(y)/length(y)

end
rozwiazanie()

# 5 obcykane

function rozwiazanie(;
    a::Float64 = -4.1,
    b::Float64 = 4.9,
    x::Vector{Float64} = [-1.04, -1.34091, -1.64182, -1.94274, -2.24365, -2.54456, -2.84547, -3.14638, -3.44729, -3.74821, -4.04912, -3.84997, -3.54906, -3.24815, -2.94723, -2.64632, -2.34541, -2.0445, -1.74359, -1.44267, -1.14176, -0.84085, -0.53994, -0.23903, 0.06188, 0.3628, 0.66371, 0.96462, 1.26553, 1.56644, 1.86736, 2.16827, 2.46918, 2.77009, 3.071, 3.37191, 3.67283, 3.97374, 4.27465, 4.57556, 4.87647, 4.62261, 4.3217, 4.02079, 3.71988, 3.41897, 3.11805, 2.81714, 2.51623, 2.21532, 1.91441, 1.6135, 1.31258, 1.01167, 0.71076, 0.40985, 0.10894, -0.19198, -0.49289, -0.7938, -1.09471, -1.39562, -1.69653, -1.99745, -2.29836, -2.59927, -2.90018, -3.20109, -3.50201, -3.80292, -4.09617, -3.79526, -3.49435, -3.19343, -2.89252, -2.59161, -2.2907, -1.98979, -1.68888, -1.38796, -1.08705, -0.78614, -0.48523, -0.18432],
)
    quantize(L) = x->L[argmin(abs.(x.-L))]
    N = 8
    L = range(start = a, stop = b, length=2^N)
    q = quantize(L)
    q_x = q.(x)
    e = x - q_x
    return sum(e.^2)/length(e)
end
rozwiazanie()

# 6 w miare ale do powtorzenia

function rozwiazanie(;
    x::Vector{Float64} = [3.99, 4.6, 3.57, 1.35, -1.29, -4.78, -1.5, 1.78, 4.86, 2.52, -0.42, 1.68, 1.4, -2.56, 0.61, 0.12, 4.6, 1.76, -4.93, -2.21, -1.07, -4.81, -3.48, -0.65, -1.04, -3.53, -2.08, 0.94, -4.23, -4.8, 1.45, 2.72, 3.48, 2.24, -1.17, 1.47, -4.83, 3.85, -0.83, 3.92, -0.13, 2.68, 2.49, 3.78, -0.07, -2.9, -2.83, -4.85, 1.29, -2.01, -2.72, -4.41, 4.86, 2.36, -2.04, 0.53, -1.86, -4.27, 0.51, 0.83, 3.42, -1.98],
    h::Vector{Float64} = [3.73, -2.41, -4.15, 3.2, -3.61, -1.43, 2.87, 4.82, 3.43, -3.85, 3.78, -1.1, -0.25, 0.97, -3.4, 4.31, 1.68, 3.21, -1.48, 0.8, 2.54, 0.25, 1.27],
)
   

    function conv(x, h) 
    A = length(x)
    B = length(h)
    C = A+B-1
    y = zeros(Float64, C)
      for i in 1:C
        for j in 1:B
          if i-j+1 >0 && i-j+1 <=A 
            y[i] = x[j]*h[i-j+1]
          end
        end
      return y 
      end
    end
      y = conv(x, h)
      return sum(y.^2)/length(y)

end
rozwiazanie()

# 7 powtorzyc kroneckera
pasmowoprzepust(order::Integer, F1::Float64, F2::Float64)::Vector = [2F2*sinc(2F2*n) - 2F1*sinc(2F1*n) for n in -order/2:order/2]
hanning(M::Integer)::AbstractVector{<:Real} = [0.5(1+cos(2*pi*n/(2M+1)))     for n in -M:M]



          
function rozwiazanie(;
    order::Int = 62,
    fp::Float64 = 190.0,
    f1::Float64 = 26.6,
    f2::Float64 = 72.2,
    z::Vector{Int} = [50, 50, 25, 21, 36],
)
    h = pasmowoprzepust(order, f1/fp, f2/fp)
    h = h.*hanning((Int(order/2)))
    h_z = [h[i] for i in z]
    return sum(h_z)
end
rozwiazanie()

# 8 jest G

function rozwiazanie(;
    b::Vector{Float64} = [0.4502459803463013, -3.3159134256014844, 12.800325198551652, -32.85570786053933, 61.78676481661911, -88.951336129986, 100.24244837863881, -88.95133612998602, 61.78676481661912, -32.85570786053934, 12.800325198551654, -3.3159134256014844, 0.4502459803463013],
    a::Vector{Float64} = [1.0, -6.493802318349136, 22.079413867010267, -50.10480710110084, 83.67169483588289, -107.51680505930148, 108.76881149517737, -87.2330360058761, 55.210830496153505, -27.023446447346085, 9.814678874415318, -2.408637623492223, 0.3149989138594487],
    x::Vector{Float64} = [0.44, -0.98, -0.13, 0.4, 0.92, 0.29, -0.05, 0.47, 1.0, 0.55, -0.9, -0.12, 0.55, -0.46, -0.3, -0.95, 0.18, 0.29, -0.64, 0.4, 0.87, 0.18, 0.21, -0.31, 0.64, 0.12, -0.78, -0.36, -0.87, 0.19, 0.94, -0.42, -0.03, 0.84, 0.12, -0.95, 0.58, 0.22, -0.01, 0.48, 0.88, -0.71, 0.46, -0.72, -0.78, -0.21, -0.04],
    L::Int = 72,
)
    y = zeros(L)
    for i in 1:L
      for j in 1:length(b)
        if i-j+1>0 && i-j+1 <=length(x)
        y[i] += b[j]*x[i-j+1] 
        end
      end
      for j in 2:length(a)
        if i-j+1>0 && i-j+1 <=L
        y[i] -= a[j]*y[i-j+1]
        end
      end
    end
    return sum(y.^2)/length(y)

end
rozwiazanie()

#9 
function rozwiazanie(;
    fp::Int = 572,
    x::Vector{ComplexF64} = ComplexF64[-0.29 - 1.49im, 0.89 - 0.61im, -0.44 + 0.09im, -0.06 + 0.79im, -0.31 - 0.94im, -1.8 + 0.46im, -1.77 - 0.6im, -0.19 - 0.2im, -0.66 + 0.55im, 0.75 + 0.67im, 0.93 - 0.33im, 0.18 - 0.59im, -0.14 - 0.33im, -1.45 + 0.12im, -0.24 + 1.02im, 0.11 - 0.62im, -0.17 + 0.46im, -0.28 + 1.28im, 0.86 + 0.39im, 0.59 - 0.52im, -0.72 + 0.53im, -0.48 + 0.68im, -0.04 - 0.76im, -0.41 + 0.22im, 0.93 + 0.23im, 0.42 - 0.03im],
    f::Vector{Int} = [-220, -198, -154, -110, -44, 132, 220, 242],
)
    N = length(x)
    return sum([abs.(sum([x[n+1]cispi(-2fi/fp*n) for n in 0:N-1])/N) for fi in f])
end
rozwiazanie()